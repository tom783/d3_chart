[{"/Users/tom783/programming/practices/d3Practice/d3chart/src/index.js":"1","/Users/tom783/programming/practices/d3Practice/d3chart/src/reportWebVitals.js":"2","/Users/tom783/programming/practices/d3Practice/d3chart/src/App.js":"3","/Users/tom783/programming/practices/d3Practice/d3chart/src/components-library/components/index.js":"4","/Users/tom783/programming/practices/d3Practice/d3chart/src/components-library/utils/convertChartData.js":"5","/Users/tom783/programming/practices/d3Practice/d3chart/src/components-library/components/Brush.js":"6","/Users/tom783/programming/practices/d3Practice/d3chart/src/components-library/tempData/lineChartData.js":"7","/Users/tom783/programming/practices/d3Practice/d3chart/src/components-library/components/ZoomableLineChart.js":"8","/Users/tom783/programming/practices/d3Practice/d3chart/src/components-library/components/ZoomableAreaChart.js":"9","/Users/tom783/programming/practices/d3Practice/d3chart/src/components-library/components/ZoomableAreaChartTooltip.js":"10"},{"size":500,"mtime":1611798236434,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1611798236435,"results":"13","hashOfConfig":"12"},{"size":565,"mtime":1612344616215,"results":"14","hashOfConfig":"12"},{"size":258,"mtime":1612341020252,"results":"15","hashOfConfig":"12"},{"size":232,"mtime":1612226426390,"results":"16","hashOfConfig":"12"},{"size":1437,"mtime":1612245508187,"results":"17","hashOfConfig":"12"},{"size":392,"mtime":1612331138796,"results":"18","hashOfConfig":"12"},{"size":2125,"mtime":1612250685414,"results":"19","hashOfConfig":"12"},{"size":9160,"mtime":1612509443397,"results":"20","hashOfConfig":"12"},{"size":6351,"mtime":1612341051914,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"10ugnlg",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"24"},"/Users/tom783/programming/practices/d3Practice/d3chart/src/index.js",[],["47","48"],"/Users/tom783/programming/practices/d3Practice/d3chart/src/reportWebVitals.js",[],"/Users/tom783/programming/practices/d3Practice/d3chart/src/App.js",["49","50"],"import styled from \"@emotion/styled\"\nimport {\n  Brush,\n  ZoomableLineChart,\n  ZoomableAreaChart,\n} from \"./components-library/components\"\nimport { data } from \"./components-library/tempData/lineChartData\"\n\nconst ViewPort = styled.div`\n  background-color: #101112;\n  width: 1200px;\n  height: 650px;\n  margin: 0 auto;\n  transform: translateY(calc(50vh - 200px));\n`\n\nfunction App() {\n  return (\n    <ViewPort>\n      {/* <ZoomableLineChart data={data} />\n      <Brush data={data} /> */}\n      <ZoomableAreaChart data={data} />\n    </ViewPort>\n  )\n}\n\nexport default App\n","/Users/tom783/programming/practices/d3Practice/d3chart/src/components-library/components/index.js",[],"/Users/tom783/programming/practices/d3Practice/d3chart/src/components-library/utils/convertChartData.js",[],"/Users/tom783/programming/practices/d3Practice/d3chart/src/components-library/components/Brush.js",["51","52"],"import * as React from \"react\"\nimport { brushX, axisTop, scaleLinear, select, extent, scaleUtc } from \"d3\"\nimport { gatherByKeys } from \"../utils/convertChartData\"\n\nfunction Brush({ data = [] }) {\n  const testRef = React.useRef()\n  const [state, setState] = React.useState([])\n\n  const brushEvent = (e) => {\n    const selectedExtend = e.selection\n    setState(selectedExtend)\n  }\n\n  const createBrush = () => {\n    const _data = gatherByKeys(data)\n\n    const svgInstance = select(testRef.current)\n    const scale = scaleUtc()\n      .domain(extent(_data.timestamp, (d) => d))\n      .range([0, 1200])\n    const setBrushEvent = brushX()\n      .extent([\n        [0, 0], //[brush 설정 x축 범위, brush 높이 좌표]\n        [1200, 100],\n      ])\n      .on(\"brush\", brushEvent)\n    const dayAxis = axisTop().scale(scale)\n\n    svgInstance\n      .append(\"g\")\n      .attr(\"class\", \"brushaxis\")\n      .attr(\"transform\", \"translate(0, 25)\")\n\n    svgInstance.select(\"g.brushaxis\").call(dayAxis) // 브러쉬 axis축 설정\n    svgInstance.append(\"g\").attr(\"class\", \"brush\").selectAll(\"g.brush\")\n\n    svgInstance.select(\"g.brush\").call(setBrushEvent) // 브러쉬 이벤트 바인딩\n  }\n\n  React.useEffect(() => {\n    createBrush()\n  }, [])\n\n  return (\n    <>\n      <svg width='1200px' ref={testRef}></svg>\n      <div>\n        {state.map((i, idx) => (\n          <p key={idx}>{i}</p>\n        ))}\n      </div>\n    </>\n  )\n}\n\nexport default Brush\n","/Users/tom783/programming/practices/d3Practice/d3chart/src/components-library/tempData/lineChartData.js",[],"/Users/tom783/programming/practices/d3Practice/d3chart/src/components-library/components/ZoomableLineChart.js",["53","54"],"import * as React from \"react\"\nimport {\n  select,\n  brushX,\n  line,\n  scaleLinear,\n  extent,\n  scaleUtc,\n  axisBottom,\n  axisLeft,\n} from \"d3\"\nimport { gatherByKeys } from \"../utils/convertChartData\"\n\nfunction ZoomableLineChart({ data = [] }) {\n  const svgRef = React.useRef()\n  const [chartNode, setChartNode] = React.useState(null)\n\n  const margin = {\n    top: 20,\n    right: 30,\n    bottom: 30,\n    left: 50,\n  }\n  const width = 1200\n  const height = 400\n\n  const makeChart = () => {\n    const svgLine = select(svgRef.current)\n    const _data = gatherByKeys(data)\n\n    const x = scaleUtc()\n      .domain(extent(_data.timestamp, (d) => d))\n      .range([margin.left, width - margin.right])\n\n    const y = scaleLinear()\n      .domain(extent(_data.value, (d) => d))\n      .range([height - margin.bottom, margin.top])\n\n    const xAxis = (g) =>\n      g\n        .attr(\"transform\", `translate(0, ${height - margin.bottom})`)\n        .call(axisBottom(x))\n\n    const yAxis = (g) =>\n      g.attr(\"transform\", `translate(${margin.left}, 0)`).call(axisLeft(y))\n\n    const brushEvent = (e) => {\n      const selectedExtend = e.selection\n      console.log(\"event\", selectedExtend)\n    }\n    const setBrushEvent = brushX()\n      .extent([\n        [margin.left, 0],\n        [width - margin.right, height - margin.bottom],\n      ])\n      .on(\"brush\", brushEvent)\n\n    const testBrush = (g) => g.attr(\"class\", \"brush\").call(setBrushEvent)\n\n    const _line = line()\n      .defined((_data) => !isNaN(_data.value))\n      .x((d) => x(d.timestamp))\n      .y((d) => y(d.value))\n\n    svgLine.append(\"g\").call(xAxis)\n    svgLine.append(\"g\").call(yAxis)\n\n    svgLine.append(\"g\").call(testBrush)\n\n    svgLine\n      .append(\"path\")\n      .datum(data)\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"steelblue\")\n      .attr(\"stroke-width\", 1.5)\n      .attr(\"stroke-linejoin\", \"round\")\n      .attr(\"stroke-linecap\", \"round\")\n      .attr(\"d\", _line)\n\n    return svgLine.node()\n  }\n\n  React.useEffect(() => {\n    setChartNode(makeChart())\n  }, [data])\n\n  return <svg width={width} height={height} ref={svgRef}></svg>\n}\n\nexport default ZoomableLineChart\n","/Users/tom783/programming/practices/d3Practice/d3chart/src/components-library/components/ZoomableAreaChart.js",["55","56","57","58","59"],"/Users/tom783/programming/practices/d3Practice/d3chart/src/components-library/components/ZoomableAreaChartTooltip.js",["60","61","62","63","64"],"import * as React from \"react\"\nimport {\n  select,\n  brushX,\n  area,\n  scaleLinear,\n  extent,\n  scaleUtc,\n  axisBottom,\n  axisLeft,\n  curveMonotoneX,\n  bisector,\n  pointer,\n} from \"d3\"\nimport styled from \"@emotion/styled\"\nimport { gatherByKeys } from \"../utils/convertChartData\"\nimport { times } from \"ramda\"\n\nconst initState = {\n  focusViewChartNode: null,\n  contextViewChartNode: null,\n}\n\nconst ZoomableAreaChartTooltip = ({ data = [] }) => {\n  const svgRef = React.useRef()\n  const [chartNode, setChartNode] = React.useState(initState)\n\n  const focusViewMargin = {\n    top: 20,\n    right: 30,\n    bottom: 30,\n    left: 50,\n  }\n\n  const contextViewMargin = {\n    top: 20,\n    right: 30,\n    bottom: 30,\n    left: 50,\n  }\n\n  const width = 1200\n  const height = 650\n  const focusViewChartHeight = 400\n  const contextViewChartHeight = 150\n\n  const makeChart = (data) => {\n    const svgLine = select(svgRef.current)\n    const _data = gatherByKeys(data)\n\n    const focusViewX = scaleUtc()\n      .domain(extent(_data.timestamp, (d) => d))\n      .range([0, width - focusViewMargin.right - focusViewMargin.left])\n\n    const focusViewY = scaleLinear()\n      .domain(extent(_data.value, (d) => d))\n      .range([\n        focusViewChartHeight - focusViewMargin.bottom,\n        focusViewMargin.top,\n      ])\n\n    const focusXAxis = axisBottom(focusViewX)\n\n    const focusArea = area()\n      .curve(curveMonotoneX)\n      .x((d) => focusViewX(d.timestamp))\n      .y0(focusViewChartHeight)\n      .y1((d) => focusViewY(d.value))\n\n    const contextViewX = scaleUtc()\n      .domain(focusViewX.domain())\n      .range([0, width - contextViewMargin.right - contextViewMargin.left])\n\n    const contextViewY = scaleLinear()\n      .domain(focusViewY.domain())\n      .range([\n        contextViewChartHeight - contextViewMargin.bottom,\n        contextViewMargin.top,\n      ])\n\n    const contextArea = area()\n      .curve(curveMonotoneX)\n      .x((d) => contextViewX(d.timestamp))\n      .y0(contextViewChartHeight - contextViewMargin.bottom)\n      .y1((d) => contextViewY(d.value))\n\n    const setTooltip = (targetChart, x, y) => {\n      const callout = (g, value) => {\n        if (!value) return g.style(\"display\", \"none\")\n        g.style(\"display\", null)\n          .stylle(\"pointer-events\", \"none\")\n          .style(\"font\", \"10px sans-serif\")\n      }\n\n      const tooltip = targetChart.append(\"g\")\n      targetChart.on(\"touchmove mousemove\", (e) => {\n        const { timestamp, value } = bisect(pointer(e, targetChart)[0])\n        tooltip\n          .attr(\"transform\", `translate(${x(timestamp)},${y(value)})`)\n          .call(callout, ``)\n      })\n      targetChart.on(\"touchend mouseleave\", () => tooltip.call(callout, null))\n    }\n\n    const bisect = () => {}\n\n    // 확대된 차트\n    const focusViewChart = () => {\n      const yAxis = axisLeft(focusViewY)\n\n      svgLine\n        .append(\"defs\")\n        .append(\"clipPath\")\n        .attr(\"id\", \"clip\")\n        .append(\"rect\")\n        .attr(\"width\", width - focusViewMargin.left - focusViewMargin.right)\n        .attr(\"height\", focusViewChartHeight)\n\n      const focus = svgLine\n        .append(\"g\")\n        .attr(\"class\", \"focus\")\n        .attr(\n          \"transform\",\n          `translate(${focusViewMargin.left}, ${\n            contextViewChartHeight +\n            contextViewMargin.top +\n            contextViewMargin.bottom +\n            focusViewMargin.top\n          })`\n        )\n\n      focus\n        .append(\"path\")\n        .datum(data)\n        .attr(\"class\", \"focus-area\")\n        .attr(\"clip-path\", \"url(#clip)\")\n        .style(\"fill\", \"none\")\n        .style(\"stroke\", \"#fcba03\")\n        .style(\"stroke-width\", 1.5)\n        .attr(\"d\", focusArea)\n\n      focus\n        .append(\"g\")\n        .attr(\"class\", \"focus-x-axis\")\n        .attr(\"transform\", `translate(0, ${focusViewChartHeight})`)\n        .call(focusXAxis)\n\n      focus\n        .append(\"g\")\n        .attr(\"class\", \"y-axis\")\n        .call(yAxis)\n        .select(\".domain\")\n        .remove()\n\n      setTooltip(focus, focusViewX, focusViewY)\n\n      return focus.node()\n    }\n\n    // 컨트롤하는 차트\n    const contextViewChart = () => {\n      const contextXAxis = axisBottom(contextViewX)\n\n      const yAxis = axisLeft(contextViewY)\n\n      const context = svgLine\n        .append(\"g\")\n        .attr(\"class\", \"context\")\n        .attr(\n          \"transform\",\n          `translate(${contextViewMargin.left}, ${contextViewMargin.top})`\n        )\n\n      context\n        .append(\"path\")\n        .datum(data)\n        .attr(\"class\", \"context-area\")\n        .style(\"fill\", \"none\")\n        .style(\"stroke\", \"#2d2fb3\")\n        .style(\"stroke-width\", 1.5)\n        .attr(\"d\", contextArea)\n\n      context\n        .append(\"g\")\n        .attr(\"class\", \"context-x-axis\")\n        .attr(\n          \"transform\",\n          `translate(0, ${contextViewChartHeight - contextViewMargin.bottom})`\n        )\n        .call(contextXAxis, contextViewX, contextViewY)\n\n      context\n        .append(\"g\")\n        .attr(\"class\", \"y-axis\")\n        .call(yAxis)\n        .select(\".domain\")\n        .remove()\n\n      context.append(\"g\").attr(\"class\", \"x-brush\")\n\n      setTooltip(context)\n\n      return context.node()\n    }\n\n    // 브러쉬 설정\n    const setBrush = () => {\n      const brushEvent = ({ selection }) => {\n        let extent = selection.map((d) => {\n          return contextViewX.invert(d)\n        })\n        focusViewX.domain(extent) // 브러쉬를 통한 데이터 업데이트\n        svgLine.select(\".focus-area\").attr(\"d\", focusArea)\n        svgLine.select(\".focus-x-axis\").call(focusXAxis)\n      }\n\n      const brush = brushX(contextViewX)\n        .extent([\n          [0, 0],\n          [\n            width - contextViewMargin.right - contextViewMargin.left,\n            contextViewChartHeight - contextViewMargin.bottom,\n          ],\n        ])\n        .on(\"brush\", brushEvent)\n\n      svgLine.select(\"g.x-brush\").call(brush)\n\n      return brush\n    }\n\n    const contextViewChartNode = contextViewChart()\n    const focusViewChartNode = focusViewChart()\n    const brushNode = setBrush()\n\n    return {\n      contextViewChartNode,\n      focusViewChartNode,\n    }\n  }\n\n  React.useEffect(() => {\n    setChartNode({ ...chartNode, ...makeChart(data) })\n  }, [data])\n\n  return <svg width={width} height={height} ref={svgRef}></svg>\n}\n\nexport default ZoomableAreaChartTooltip\n",{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":3,"column":3,"nodeType":"71","messageId":"72","endLine":3,"endColumn":8},{"ruleId":"69","severity":1,"message":"73","line":4,"column":3,"nodeType":"71","messageId":"72","endLine":4,"endColumn":20},{"ruleId":"69","severity":1,"message":"74","line":2,"column":27,"nodeType":"71","messageId":"72","endLine":2,"endColumn":38},{"ruleId":"75","severity":1,"message":"76","line":42,"column":6,"nodeType":"77","endLine":42,"endColumn":8,"suggestions":"78"},{"ruleId":"69","severity":1,"message":"79","line":16,"column":10,"nodeType":"71","messageId":"72","endLine":16,"endColumn":19},{"ruleId":"75","severity":1,"message":"80","line":85,"column":6,"nodeType":"77","endLine":85,"endColumn":12,"suggestions":"81"},{"ruleId":"69","severity":1,"message":"82","line":17,"column":8,"nodeType":"71","messageId":"72","endLine":17,"endColumn":14},{"ruleId":"69","severity":1,"message":"83","line":188,"column":13,"nodeType":"71","messageId":"72","endLine":188,"endColumn":24},{"ruleId":"69","severity":1,"message":"84","line":301,"column":17,"nodeType":"71","messageId":"72","endLine":301,"endColumn":18},{"ruleId":"69","severity":1,"message":"85","line":313,"column":11,"nodeType":"71","messageId":"72","endLine":313,"endColumn":20},{"ruleId":"75","severity":1,"message":"86","line":325,"column":6,"nodeType":"77","endLine":325,"endColumn":12,"suggestions":"87"},{"ruleId":"69","severity":1,"message":"88","line":12,"column":3,"nodeType":"71","messageId":"72","endLine":12,"endColumn":11},{"ruleId":"69","severity":1,"message":"82","line":15,"column":8,"nodeType":"71","messageId":"72","endLine":15,"endColumn":14},{"ruleId":"69","severity":1,"message":"89","line":17,"column":10,"nodeType":"71","messageId":"72","endLine":17,"endColumn":15},{"ruleId":"69","severity":1,"message":"85","line":234,"column":11,"nodeType":"71","messageId":"72","endLine":234,"endColumn":20},{"ruleId":"75","severity":1,"message":"86","line":244,"column":6,"nodeType":"77","endLine":244,"endColumn":12,"suggestions":"90"},"no-native-reassign",["91"],"no-negated-in-lhs",["92"],"no-unused-vars","'Brush' is defined but never used.","Identifier","unusedVar","'ZoomableLineChart' is defined but never used.","'scaleLinear' is defined but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'createBrush'. Either include it or remove the dependency array.","ArrayExpression",["93"],"'chartNode' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'makeChart'. Either include it or remove the dependency array.",["94"],"'styled' is defined but never used.","'handleShape' is assigned a value but never used.","'x' is assigned a value but never used.","'brushNode' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'chartNode' and 'makeChart'. Either include them or remove the dependency array. You can also do a functional update 'setChartNode(c => ...)' if you only need 'chartNode' in the 'setChartNode' call.",["95"],"'bisector' is defined but never used.","'times' is defined but never used.",["96"],"no-global-assign","no-unsafe-negation",{"desc":"97","fix":"98"},{"desc":"99","fix":"100"},{"desc":"101","fix":"102"},{"desc":"101","fix":"103"},"Update the dependencies array to be: [createBrush]",{"range":"104","text":"105"},"Update the dependencies array to be: [data, makeChart]",{"range":"106","text":"107"},"Update the dependencies array to be: [chartNode, data, makeChart]",{"range":"108","text":"109"},{"range":"110","text":"109"},[1182,1184],"[createBrush]",[2016,2022],"[data, makeChart]",[8859,8865],"[chartNode, data, makeChart]",[6175,6181]]